; -*- Mode: Lisp -*-

(in-package :sqnc)

; blp

;; (def-opcode blp (a kki)
;;   (setksmps _ 1)
;;   (xin (kamp kf itb))
;;   (= kn (int (/ sr (* 2 kf))))
;;   (phasor kph (/ kf 20))
;;   (tablei kden kph itb 1)
;;   (if (!= kden 0)
;;       (pn (tablei knum (* kph (+ (* 2 kn) 1)) itb 1 0 1)
;;        (= asig (* (/ kamp (* 2 kn))
;;                   (- (/ knum kden) 1))))
;;       (= asig kamp))
;;   (xout _ asig))

;; effects

; pvseq

(defcsmac pvseq-code (l r depth)
  `(orc (pvsanal f0 ,l 1024 256 1024 0)
        (ftgen gir 0 0 513 8 1 512 1)
        (pvsmaska f1 f0 gir ,depth)
        (pvsynth ,l f1)
        (pvsanal f0 ,r 1024 256 1024 0)
        (ftgen gir 0 0 513 8 1 512 1)
        (pvsmaska f1 f0 gir ,depth)
        (pvsynth ,r f1)))

(defeffect pvseq
  (name    "Pvseq")
  (params  (ls (mk-ctl 'kchnctl "Depth" 0 1 .8)))
  (csmac-name 'pvseq-code))

; lowpass2

(defcsmac lowpass2-effect-code (l r cutoff resonance)
  `(orc (lowpass2 ,l ,l ,cutoff ,resonance)
        (lowpass2 ,r ,r ,cutoff ,resonance)))

(defeffect lowpass2-effect
  (name    "Lowpass2-effect")
  (params  (ls (mk-ctl 'kchnctl "Cutoff" 0 15000 10000)
               (mk-ctl 'kchnctl "Resonance" 0 1 .5)))
  (csmac-name 'lowpass2-effect-code))

; convol

(defcsmac convol-code (l r)
  `(orc (pconvolve (,l ,r) (/ (+ ,l ,r) 2) "/home/luke/audio/IR/church1.wav" 32768 0)))

(defeffect convol
  (name    "Convol")
  (csmac-name 'convol-code))

; babo

(defcsmac bverb-code (l r srcx srcy srcz resx resy resz)
  `(orc (babo (,l ,r) (+ ,l ,r) ,srcx ,srcy ,srcz ,resx ,resy ,resz)
        (denorm _ ,l ,r)))

(defeffect bverb
  (name    "bverb")
  (params  (ls (mk-ctl 'kchnctl "srcx" 0 20 6)
               (mk-ctl 'kchnctl "srcy" 0 20 4)
               (mk-ctl 'kchnctl "srcz" 0 20 3)
               (mk-ctl 'ichnctl "resx" 0 20 14.39)
               (mk-ctl 'ichnctl "resy" 0 20 11.86)
               (mk-ctl 'ichnctl "resz" 0 20 10)))
  (csmac-name 'bverb-code))

;; instruments

; pluck

(defcsmac pluck-code (inum)
  `(orc (instr (,inum)
               (pfbind 3 idur itrk iamp ipan icps iatt ihol idec isus irel)
               (tiskip (pluck a0 iamp icps icps 0 1))
               (pan2 (a0 a1) a0 ipan)
               (ahdsr a0 a1 iatt ihol idec isus irel)
               (trackout a0 a1 itrk))))

(definst pluck (inst)
  (pluck-note (trg)
    (amp  (dfctl "Amplitude"   0  1 0 .8 :l))
    (pan  (dfctl "Pan"         0  1 0 .5 :l))
    (cps  (dfctl "Pitchbend" -48 48 0  0 :l))
    (att  (cfctl "Attack"      0  5 0))
    (hol  (cfctl "Hold"        0  5 0))
    (dec  (cfctl "Decay"       0  5 0))
    (sus  (cfctl "Sustain"     0  1 1))
    (rel  (cfctl "Release"     0  5 0)))
  (name "Pluck")
  (csmac-name 'pluck-code))

(defm generator ((n pluck-note))
  (trg-gen n
           (expt-ctl (amp n) 2)
           (pan n)
           (pitchbend-ctl (keynum n) (cps n))
           (att n)
           (hol n)
           (dec n)
           (expt-ctl (sus n) 2)
           (rel n)))

; vco2

(defcsmac vco2-code (inum)
  `(orc (instr (,inum)
               (pfbind 3 idur itrk iamp ipan icps iatt ihol idec isus irel)
               (tiskip (vco2 a0 iamp icps))
               (pan2 (a0 a1) a0 ipan)
               (ahdsr a0 a1 iatt ihol idec isus irel)
               (trackout a0 a1 itrk))))

(definst vco2 (inst)
  (vco2-note (trg)
    (amp  (dfctl "Amplitude" 0 1 0 .8 :l))
    (pan  (dfctl "Pan"       0 1 0 .5 :l))
    (cps  (dfctl "Pitchbend" -48 48 0 0 :l))
    (att  (cfctl "Attack"    0 5 0))
    (hol  (cfctl "Hold"      0 5 0))
    (dec  (cfctl "Decay"     0 5 0))
    (sus  (cfctl "Sustain"   0 1 1))
    (rel  (cfctl "Release"   0 5 0)))
  (name "vco2")
  (csmac-name 'vco2-code))

(defm generator ((n vco2-note))
  (trg-gen n
           (expt-ctl (amp n) 2)
           (pan n)
           (pitchbend-ctl (keynum n) (cps n))
           (att n)
           (hol n)
           (dec n)
           (expt-ctl (sus n) 2)
           (rel n)))

; samp0

(defcsmac samp0-code (inum)
  `(orc (instr (,inum)
               (pfbind 3 idur itrk iamp ipan ikey iatt ihol idec isus
                       irel icps ibeg iend icross itnum istart imode)
               (max iend iend (+ istart .0001))
               (max iend iend (+ ibeg   .0001))
               (tiskip (flooper2 a0 iamp icps ibeg iend icross itnum istart imode 0))
               (= a0 (* a0 4))
               (pan2 (a0 a1) a0 ipan)
               (ahdsr a0 a1 iatt ihol idec isus irel)
               (trackout a0 a1 itrk))))

(definst samp0 (sample-inst)
  (samp0-note (trg)
    (amp           (dfctl "Amplitude"     0 1 0 .8 :l))
    (pan           (dfctl "Pan"           0 1 0 .5 :l))
    (att           (cfctl "Attack"        0 5 0))
    (hol           (cfctl "Hold"          0 5 0))
    (dec           (cfctl "Decay"         0 5 0))
    (sus           (cfctl "Sustain"       0 1 1))
    (rel           (cfctl "Release"       0 5 0))
    (cps           (dfctl "Cycles/sec"    0 5 0 1 :l))
    (sample-start  (dfctl "Sample Start"  0 1 0 0 :l))
    (loop-start    (dfctl "Loop Start"    0 1 0 0 :l))
    (loop-end      (dfctl "Loop End"      0 1 0 1 :l))
    (loop-mode     (dfctl "Loop Mode"     0 2 0 0 :l))
    (crossover     (dfctl "Crossover"     0 5 0 0 :l)))
  (name "samp0")
  (csmac-name 'samp0-code))

(defm generator ((n samp0-note))
  (w/samp (n keynum range start end)
    (trg-gen n
             (expt-ctl (amp n) 2)
             (pan n)
             (cps n)
             (att n)
             (hol n)
             (dec n)
             (expt-ctl (sus n) 2)
             (rel n)
             (repitch-ctl (cps n) keynum (base-key range))
             (rescale-ctl (loop-start   n) start end)
             (rescale-ctl (loop-end     n) start end)
             (crossover n)
             (table-num (get-sample (id range)))
             (rescale-ctl (sample-start n) start end)
             (loop-mode n))))

; telastic

(defcsmac telastic-code (inum)
  `(orc (instr (,inum)
               (pfbind 3 idur itrk iamp ipan iatt ihol idec isus irel ipshft itstr
                       iwid ismth istart iend itnum)
               (= iwid (* iwid sr))
               (= ifph (* (/ sr iwid) (+ (/ (- itstr 1) itstr) (- ipshft 1))))
               (= ilen (* (/ (- iend istart) sr) itstr))
               (tiskip (phasor aphas1 ifph)
                       (phasor aphas2 ifph .5)
                       (linseg apos (- istart (/ iwid 2)) ilen iend)
                       (oscil kdclk1 1 ifph gitelastic)
                       (oscil kdclk2 1 ifph gitelastic .5)
                       (= kdclk1 (* (+ (tanh (* kdclk1 ismth)) 1) .5))
                       (= kdclk2 (* (+ (tanh (* kdclk2 ismth)) 1) .5))
                       (table3 ashft1 (+ (* iwid aphas1) apos) itnum)
                       (table3 ashft2 (+ (* iwid aphas2) apos) itnum)
                       (linseg kcut 1 ilen 1 0 0)
                       (= a0 (* kcut (+ (* ashft1 kdclk1) (* ashft2 kdclk2)))))
               (= a0 (* iamp 5 a0))
               (pan2 (a0 a1) a0 ipan)
               (ahdsr a0 a1 iatt ihol idec isus irel)
               (trackout a0 a1 itrk))))

(definst telastic (sample-inst)
  (telastic-note (trg)
    (amp          (dfctl "Amplitude"      0      1  0 .8 :l))
    (pan          (dfctl "Pan"            0      1  0 .5 :l))
    (att          (cfctl "Attack"         0      5  0))
    (hol          (cfctl "Hold"           0      5  0))
    (dec          (cfctl "Decay"          0      5  0))
    (sus          (cfctl "Sustain"        0      1  1))
    (rel          (cfctl "Release"        0      5  0))
    (pshift       (dfctl "Pitchshift"     0.001  5  0  1   :l))
    (tstretch     (dfctl "Timestretch"    0.001  5  0  1   :l))
    (width        (dfctl "Window Width"   0.001  1  0  .05 :l))
    (smooth       (dfctl "Smoothing"      0.001  5  0  2   :l))
    (sample-start (dfctl "Sample Start"   0      1  0  0   :l))
    (sample-end   (dfctl "Sample End"     0.0001 1  0  1   :l)))
  (name      "Telastic")
  (stmts     '((ftgen gitelastic 0 0 65536 9 1 1 270)))
  (csmac-name 'telastic-code))

(defm generator ((n telastic-note))
  (w/when (inst   (inst n)
           map    (sample-map inst)
           keynum (keynum n)
           range  (keynum->map-range keynum map)
           start  (start-samples range)
           end    (samples (get-sample (id range))))
          (trg-gen n
                   (expt-ctl (amp n) 2) (pan n) (att n)
                   (hol n) (dec n) (expt-ctl (sus n) 2)
                   (rel n) (pshift n) (tstretch n)
                   (width n) (smooth n)
                   (rescale-ctl (sample-start n) start end)
                   (rescale-ctl (sample-end   n) start end)
                   (table-num (get-sample (id range))))))

; sndwarp

(defcsmac sndwarp-code (inum)
  `(orc (instr (,inum)
               (pfbind 3 idur itrk iamp ipan iatt ihol idec isus irel iwarp
                       icps itnum istart iwsize irandw ioverlap)
               (tiskip (sndwarp (a0 ac) iamp iwarp icps itnum istart iwsize
                                irandw ioverlap gisndwarp 0)
                       (balance a0 a0 ac))
               (= a0 (* a0 4))
               (pan2 (a0 a1) a0 ipan)
               (ahdsr a0 a1 iatt ihol idec isus irel)
               (trackout a0 a1 itrk))))

(definst sndwarp (sample-inst)
  (sndwarp-note (trg)
    (amp           (dfctl "Amplitude"      0 1 0 .8 :l))
    (pan           (dfctl "Pan"            0 1 0 .5 :l))
    (att           (cfctl "Attack"         0 5 0))
    (hol           (cfctl "Hold"           0 5 0))
    (dec           (cfctl "Decay"          0 5 0))
    (sus           (cfctl "Sustain"        0 1 1))
    (rel           (cfctl "Release"        0 5 0))
    (warp          (dfctl "Timewarp"       0.001 5 0 1 :l))
    (cps           (dfctl "Cycles/sec"     0.001 5 0 1 :l))
    (sample-start  (dfctl "Sample Start"   0 1 0 0 :l))
    (wsize         (dfctl "Window Size"    1 100000 0 4410 :l))
    (randw         (dfctl "Rand Bandwidth" 1 10000 0 882 :l))
    (overlap       (dfctl "Overlap"        1 100 0 15 :l)))
  (name "sndwarp")
  (stmts '((ftgen gisndwarp 0 0 16384 9 0.5 1 0)))
  (csmac-name 'sndward-code))

(defm generator ((n sndwarp-note))
  (w/samp (n keynum range start end)
    (trg-gen n (expt-ctl (amp n) 2) (pan n) (att n) (hol n)
             (dec n) (expt-ctl (sus n) 2) (rel n) (warp n)
             (cps n) (table-num (get-sample (id range)))
             (rescale-ctl (sample-start n) start end)
             (wsize n) (randw n) (overlap n))))

; loscil

(defcsmac loscil-code (inum)
  `(orc (instr (,inum)
               (pfbind 3 idur itrk iamp ipan ikey iatt ihol idec isus
                       irel ibase icps imod1 ibeg1 iend1 imod2 ibeg2 iend2)
               (tiskip
                (loscil a0 iamp icps ikey ibase imod1 ibeg1 iend1 imod2 ibeg2 iend2))
               (pan2 (a0 a1) a0 ipan)
               (ahdsr a0 a1 iatt ihol idec isus irel)
               (trackout a0 a1 itrk))))

(definst loscil (sample-inst)
  (loscil-note (trg)
    (cps     (dfctl "Pitchbend" -48 48 0  0 :l))
    (amp     (dfctl "Amplitude"   0  1 0 .8 :l))
    (pan     (dfctl "Pan"         0  1 0 .5 :l))
    (att     (cfctl "Attack"      0 5 0))
    (hol     (cfctl "Hold"        0 5 0))
    (dec     (cfctl "Decay"       0 5 0))
    (sus     (cfctl "Sustain"     0 1 1))
    (rel     (cfctl "Release"     0 5 0))
    (ibase   1)
    (icps    1)
    (imod1   1)
    (ibeg1   0)
    (iend1   10000)
    (imod2   2)
    (ibeg2   5000)
    (iend2   15000))
  (name "loscil")
  (csmac-name 'loscil-code))

(defm generator ((n loscil-note))
  (trg-gen n
           (expt-ctl (amp n) 2)
           (pan   n)
           (cps   n)
           (att   n)
           (hol   n)
           (dec   n)
           (expt-ctl (sus n) 2)
           (rel   n)
           (ibase n)
           (icps  n)
           (imod1 n)
           (ibeg1 n)
           (iend1 n)
           (imod2 n)
           (ibeg2 n)
           (iend2 n)))

; pipe-organ

(defcsmac pipe-organ-code (inum)
  `(orc (instr (,inum)
               (pfbind 3 idur itrk iamp ipan icps iatt ihol idec isus irel)
               (= ifqc  icps)
               (= iop1f ifqc)
               (= iop2f (* 2.01 ifqc))
               (= iop3f (* 3.99 ifqc))
               (= iop4f (* 8    ifqc))
               (= iop5f (* .5   ifqc))
               (= iop7f (* 16   ifqc))
               (tiskip (linseg kamp1 0 .01 1 .001 1)
                       (linseg kamp2 0 .05 1 .1 .7 .001 .7)
                       (linseg kamp3 0 .03 .8 .05 0 .01 0)
                       (linseg kamp4 0 .1 .3 .1 .05 .001 .1 .001 .1)
                       (oscil aop8 kamp4 iop5f gipipeorgan)
                       (= ap1 (+ aop8 1))
                       (oscil aop1 kamp1 (* ap1 iop1f) gipipeorgan)
                       (oscil aop2 kamp2 (* ap1 iop2f) gipipeorgan)
                       (oscil aop3 kamp2 iop3f gipipeorgan)
                       (oscil aop4 kamp2 iop4f gipipeorgan)
                       (oscil aop5 kamp3 (* iop5f 5) gipipeorgan)
                       (oscil aop7 kamp2 iop7f gipipeorgan))
               (= a0 (* iamp (+ aop1 aop2 aop3 aop4 aop5 aop7)))
               (pan2 (a0 a1) a0 ipan)
               (ahdsr a0 a1 iatt ihol idec isus irel)
               (trackout a0 a1 itrk))))

(definst pipe-organ (inst)
  (pipe-organ-note (trg)
    (amp     (dfctl "Amplitude"   0  1 0 .8 :l))
    (pan     (dfctl "Pan"         0  1 0 .5 :l))
    (cps     (dfctl "Pitchbend" -48 48 0  0 :l))
    (att     (cfctl "Attack"      0 5 0))
    (hol     (cfctl "Hold"        0 5 0))
    (dec     (cfctl "Decay"       0 5 0))
    (sus     (cfctl "Sustain"     0 1 1))
    (rel     (cfctl "Release"     0 5 0)))
  (name "Pipe-organ")
  (stmts '((ftgen gipipeorgan 0 0 8192 10 1)))
  (csmac-name 'pipe-organ-code))

(defm generator ((n pipe-organ-note))
  (trg-gen n
           (expt-ctl (amp n) 2)
           (pan   n)
           (pitchbend-ctl (keynum n) (cps n)) ;; (cps n)
           (att   n)
           (hol   n)
           (dec   n)
           (expt-ctl (sus n) 2)
           (rel   n)))
